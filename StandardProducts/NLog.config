<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" autoReload="true" throwExceptions="false" internalLogFile="c:\Data\logs\StandardProducts\nlog.log" internalLogLevel="Warn">
  
  <!-- Load the ASP.NET Core plugin -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore" />
  </extensions>

  <targets async="true">

    <target name="consoleTarget" xsi:type="ColoredConsole"
            layout="${date:format=HH\:mm\:ss} | ${message} | ${exception:format=ToString}" />
    <!-- csv to anaylse this with logparser -->
    <target xsi:type="File" name="fileTarget" fileName="C:/Data/logs/StandardProducts/logfile_${date:format=yyyy-MM-dd}.log"
            archiveFileName="C:/Data/logs/StandardProducts/logfile_archive.${date:format=yyyy-MM-dd}.log"
            archiveEvery="Day"
            archiveNumbering="Rolling"
            maxArchiveFiles="28">
      <layout xsi:type="CsvLayout">
        <!-- CSV Options -->
        <quoting>Auto</quoting>
        <quoteChar>"</quoteChar>
        <withHeader>true</withHeader>
        <delimiter>Comma</delimiter>
        <column layout="${date:format=yyyy-MM-dd HH\:mm\:ss\:fff}" name="timestamp"/>
        <column layout="${processname}" name="processname"/>
        <column layout="${logger}" name="logger"/>
        <column layout="${callsite}" name="callsite"/>
        <column layout="${level}" name="level"/>
        <column layout="${message}" name="message"/>
        <column layout="${exception:format=ToString}" name="exception"/>
        <!-- repeated -->
      </layout>
    </target>

    <target xsi:type="File" name="elasticSearchQueriesFileTarget" fileName="C:/Data/logs/StandardProducts/elasticSearchQueries_${date:format=yyyy-MM-dd}.log"
            archiveFileName="C:/Data/logs/StandardProducts/elasticSearchQueries_archive.${date:format=yyyy-MM-dd}.log"
            archiveEvery="Day"
            archiveNumbering="Rolling"
            maxArchiveFiles="28">
      <layout xsi:type="CsvLayout">
        <!-- CSV Options -->
        <quoting>Auto</quoting>
        <quoteChar>"</quoteChar>
        <withHeader>true</withHeader>
        <delimiter>Comma</delimiter>
        <column layout="${date:format=yyyy-MM-dd HH\:mm\:ss\:fff}" name="timestamp"/>
        <column layout="${processname}" name="processname"/>
        <column layout="${logger}" name="logger"/>
        <column layout="${level}" name="level"/>
        <column layout="${event-properties:item=Uri}" name="Uri"/>
        <column layout="${event-properties:item=HttpStatusCode}" name="HttpStatusCode"/>
        <column layout="${event-properties:item=HttpMethod}" name="HttpMethod"/>
        <column layout="${event-properties:item=OriginalException}" name="OriginalException"/>
        <column layout="${event-properties:item=ServerError}" name="ServerError"/>
        <column layout="${event-properties:item=DebugInformation}" name="DebugInformation"/>
        <column layout="${message}" name="message"/>
        <column layout="${exception:format=ToString}" name="exception"/>
        <!-- repeated -->
      </layout>
    </target>

    <target xsi:type="Chainsaw" name="log2console" address="udp://127.0.0.1:7071" />
  </targets>
  <rules>
    <!-- Log Elastic Search Queries 
    In case of using "Trace" log level it is required to restart docker container in order to log queries and responses.

    Filtering example. Only log the data related to specific index:
    <logger name="ElasticSearch.Queries" minlevel="Trace" writeTo="elasticSearchQueriesFileTarget" final="true">
      <filters>
        <when condition="not contains('${event-properties:item=Uri}','INDEX_NAME')" action="Ignore" />
      </filters>
    </logger>
    -->
    <logger name="ElasticSearch.Queries" minlevel="${environment:MYEP_ELASTIC_SEARCH_LOG_LEVEL}" writeTo="elasticSearchQueriesFileTarget" final="true"/>

    <!-- default logger -->
    <logger name="*" minlevel="${environment:MYEP_LOG_LEVEL_CONSOLE}" writeTo="consoleTarget" />
    <logger name="*" minlevel="${environment:MYEP_LOG_LEVEL_FILE}" writeTo="fileTarget" />
    <logger name="*" minlevel="${environment:MYEP_LOG_LEVEL_CONSOLE2}" writeTo="log2console" />
  </rules>
</nlog>
